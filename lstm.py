# -*- coding: utf-8 -*-
"""LSTM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n6VVM-CVAbroPYam9qYw4V5QxgsJVeLR
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import tensorflow as tf
from keras.datasets import imdb
from keras.utils import plot_model
from keras.models import Sequential
from keras.layers import Dense, LSTM, Embedding
from keras_preprocessing.sequence import pad_sequences

top_words = 5000
(X_train, Y_train), (X_test, Y_test) = imdb.load_data(num_words = top_words)

print(f"SHAPE OF X_train = {X_train.shape} and Y_train = {Y_train.shape}")
print(f"SHAPE OF X_test = {X_test.shape} and Y_test = {Y_test.shape}")
max_review_length = 600
X_train = pad_sequences(X_train, max_review_length)
X_test = pad_sequences(X_test, max_review_length)

print(f"SHAPE OF X_train = {X_train.shape} and Y_train = {Y_train.shape}")
print(f"SHAPE OF X_test = {X_test.shape} and Y_test = {Y_test.shape}")
embedding_vector_length = 64
model = Sequential([
    Embedding(top_words + 1, embedding_vector_length, input_length=max_review_length),
    LSTM(500),
    Dense(50, activation = 'relu'),
    Dense(100, activation = 'relu'),
    Dense(100, activation = 'relu'),
    Dense(50, activation = 'relu'),
    Dense(1, activation = 'sigmoid'),
])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()
plot_model(model, to_file='model.png', show_shapes=True)

h = model.fit(X_train, Y_train, epochs=1, batch_size=1000)
loss, accuracy = model.evaluate(X_test, Y_test)
print("ACCURACY ON TESTING DATA:", round(accuracy, 3))
Y_pred = model.predict(X_test)
Y_test = [i for i in Y_test]
Y_pred = [round(i[0]) for i in Y_pred]
incorr = 0
for i in range(len(Y_pred)):
    if Y_pred[i] != Y_test[i]:
        incorr += 1

print(f"WRONGLY PREDICTED = {incorr}/{len(Y_pred)}")
confuse_mat = tf.math.confusion_matrix(Y_test, Y_pred)
plt.figure(figsize=(12,8))
sns.heatmap(confuse_mat, annot = True, fmt = 'd')
plt.xlabel("PREDICTED VALUE")
plt.ylabel("ACTUAL VALUE")
plt.show()

